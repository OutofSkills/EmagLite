@using System.Text.Json

<AuthorizeView>
    <Authorized>
        @if (user.Avatar is null)
        {
            <PersonCard Style="background-color: var(--mud-palette-drawer-background);color: var(--mud-palette-drawer-text);" 
                        UserName=@(context.User.FindFirst(ClaimTypes.Name).Value)
                        Role=@(context.User.FindFirst(ClaimTypes.Role).Value)
                        Avatar=@(context.User.FindFirst(ClaimTypes.Name).Value.ToUpper().Substring(0, 1)) />
        }
        else
        {
            <PersonCard Style="background-color: var(--mud-palette-drawer-background);color: var(--mud-palette-drawer-text);"
                        UserName=@(context.User.FindFirst(ClaimTypes.Name).Value)
                        Role=@(context.User.FindFirst(ClaimTypes.Role).Value)
                        Avatar="@string.Format("data:image/svg+xml+jpg+jpeg;base64,{0}", Convert.ToBase64String(user.Avatar))" />
        }
    </Authorized>
</AuthorizeView>

<MudDivider Class="mb-4" />
<MudNavMenu>
    <MudText Typo="Typo.subtitle2" Color="Color.Inherit" Class="ml-4 my-3">Personal</MudText>
    <MudNavLink Href="/personal/dashboard" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Dashboard">Dashboard</MudNavLink>
    <MudNavLink Href="/personal/account" Icon="@Icons.Material.Outlined.Person">Account</MudNavLink>

    <MudText Typo="Typo.subtitle2" Color="Color.Inherit" Class="ml-4 my-3">Management</MudText>
    <MudNavLink Href="management/products" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Outlined.ShoppingBag">Products</MudNavLink>
    <MudNavLink Href="management/categories" Icon="@Icons.Material.Outlined.Category">Categories</MudNavLink>
    <MudNavLink Href="management/users" Icon="@Icons.Material.Outlined.PeopleAlt">Users</MudNavLink>
</MudNavMenu>

@code { 
    string AlertAssignmentIcon { get; set; } = "<path d=\"M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3H9.18C9.6,1.84 10.7,1 12,1C13.3,1 14.4,1.84 14.82,3H19M12,3A1,1 0 0,0 11,4A1,1 0 0,0 12,5A1,1 0 0,0 13,4A1,1 0 0,0 12,3M7,7V5H5V19H19V5H17V7H7M11,9H13V13.5H11V9M11,15H13V17H11V15Z\" />"; 

      User user = new();

    [Inject] public IUsersService UsersService { get; set; }

    [Inject] public AuthenticationStateProvider AuthStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var id = await GetLoggedUserId();
        if(id != 0)
        {
            user = await UsersService.GetUserAsync(id);
        }
        else
        {
            user = null;
        }
    }

    private async Task<int> GetLoggedUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;

            return int.Parse(userId);
        }

        return 0;
    }
} 